1) SELECT title FROM (SELECT * FROM film WHERE film.film_id NOT IN 
(SELECT distinct film_id FROM rental INNER JOIN inventory ON rental.inventory_id=inventory.inventory_id)) as unrented_films
INNER JOIN film_category ON unrented_films.film_id = film_category.film_id
INNER JOIN category ON film_category.category_id = category.category_id
WHERE (name = 'Sci-Fi' or name = 'Horror') and (rating = 'R' or rating = 'PG-13')

The JOIN operations is expensive, which can be improved by using btree indices for the joining conditions.
Moreover, the checking for film category and rating is expensive, but it can be improved by using hash indices to support faster comparation.

2) CREATE TEMPORARY VIEW store_profit as
SELECT store.store_id, address.city_id, SUM(payment.amount)
FROM payment
INNER JOIN rental ON payment.rental_id = rental.rental_id
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN store ON store.store_id = inventory.store_id
INNER JOIN address ON store.address_id = address.address_id
WHERE payment.payment_date > '2007-04-14'
GROUP BY store.store_id, address.city_id;

SELECT store_profit.store_id, store_profit.city_id, store_profit.sum
FROM store_profit
WHERE (city_id, sum) IN (
SELECT city_id, MAX(sum)
FROM store_profit
GROUP BY city_id)
